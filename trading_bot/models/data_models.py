# trading_bot/models/data_models.py
from dataclasses import dataclass
from typing import Dict, List, Any, Optional
from datetime import datetime
import pandas as pd

@dataclass
class Candle:
    """
    Represents OHLCV (Open, High, Low, Close, Volume) data for a time period
    """
    timestamp: datetime
    open: float
    high: float
    low: float
    close: float
    volume: float
    symbol: str

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Candle':
        """Create a Candle instance from a dictionary"""
        return cls(
            timestamp=data['timestamp'] if isinstance(data['timestamp'], datetime) 
                     else pd.to_datetime(data['timestamp']),
            open=float(data['open']),
            high=float(data['high']),
            low=float(data['low']),
            close=float(data['close']),
            volume=float(data['volume']),
            symbol=data['symbol']
        )

@dataclass
class Trade:
    """
    Represents a completed trade
    """
    symbol: str
    order_id: str
    side: str  # 'buy' or 'sell'
    amount: float
    price: float
    cost: float
    fee: float
    timestamp: datetime
    
    @property
    def is_buy(self) -> bool:
        """Check if this is a buy trade"""
        return self.side.lower() == 'buy'
    
    @property
    def is_sell(self) -> bool:
        """Check if this is a sell trade"""
        return self.side.lower() == 'sell'

@dataclass
class Position:
    """
    Represents an open position
    """
    symbol: str
    side: str  # 'long' or 'short'
    amount: float
    entry_price: float
    current_price: float
    unrealized_pnl: float = 0.0
    realized_pnl: float = 0.0
    
    def update_price(self, price: float) -> None:
        """Update the current price and unrealized PnL"""
        self.current_price = price
        # Calculate unrealized PnL
        if self.side.lower() == 'long':
            self.unrealized_pnl = (self.current_price - self.entry_price) * self.amount
        else:
            self.unrealized_pnl = (self.entry_price - self.current_price) * self.amount

@dataclass
class Signal:
    """
    Trading signal generated by a strategy
    """
    symbol: str
    timestamp: datetime
    signal_type: str  # 'buy', 'sell', 'close'
    price: float
    strategy_name: str
    params: Dict[str, Any] = None
    strength: float = 1.0  # Signal strength/confidence (0.0 to 1.0)
    
    def __post_init__(self):
        if self.params is None:
            self.params = {}

@dataclass
class Order:
    """
    Order to be executed on an exchange
    """
    symbol: str
    order_type: str  # 'market', 'limit', etc.
    side: str  # 'buy' or 'sell'
    amount: float
    price: Optional[float] = None  # Required for limit orders
    params: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.params is None:
            self.params = {}
        
        # For market orders, price can be None
        if self.order_type.lower() == 'market':
            self.price = None
        # For limit orders, price is required
        elif self.price is None and self.order_type.lower() == 'limit':
            raise ValueError("Price is required for limit orders")